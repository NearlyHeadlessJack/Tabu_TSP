'''
搜索产生的各种表的集合及其封装
'''
from ast import Sub
from time import sleep
from types import new_class
import numpy as np
import random


# 禁忌表类的实现 ========================
class TList:
    list = []
    max_length = 3  # 禁忌表长度
    
    def __init__(self,length):
        self.list=[]
        for i in range(0,length):
            self.list.append({0,0})
        self.max_length = length
        return
    
    def change_size(self,length):
        self.list=[]
        for i in range(0,length):
            self.list.append({0,0})
        self.max_length = length
        return
        
    
    def search(self,obj):
        for list in self.list:
            if(list == obj):
                return True
        return False

    def iter(self,obj):
        for i in range(1,self.max_length):
            self.list[self.max_length-i] = self.list[self.max_length-i-1]
        self.list[0] = obj
        
    def __del__(self):
        self.list = []
        

# test = TList(3)
# test.iter({1,2})
# test.iter({1,3})
# test.iter({1,4})
# test.iter({1,5})
# print(test.search({1,4}))
# 频数表类的实现 ========================

class PList:
    best = 0 # 渴望水平
    map = [[],[]]
    
    def __init__(self):
        self.map = [[],[]]
        return
    
    def iter(self,obj,isBan=False):
        if isBan:
            return 0
        for set in self.map[0]:
            if set == obj:
                return self.map[0].index(set)
        return 0
                    

    
    def add(self,obj):
        index = self.iter(obj)
        if index == 0:
            self.map[0].append(obj)
            self.map[1].append(1)
        else:
            self.map[1][index] += 1
            
class Cache:
    
    r = []
    m1 = []
    m2 = []
    
    
    def __init__(self):
        self.r=np.array(self.r)
        self.m1=np.array(self.m1)
        self.m2=np.array(self.m2)
        
    def add(self,m1,m2,r):
        self.r=np.append(self.r,r)
        self.m1=np.append(self.m1,m1)
        self.m2=np.append(self.m2,m2)
        
    def minimum(self):
        minr = float(np.min(self.r))
        index = np.where(self.r == np.min(self.r))

        return minr,int(self.m1[index]),int(self.m2[index])
    
    
class Subset:
    set = []
    
    def __init__(self,mov,size):
        return 
        
    def shuffle(self,mov,size):
        change_set = [{2, 46}, {56, 90}, {24, 7}, {48, 77}, {20, 47}, {34, 78}, {8, 1}, {62, 95}, {21, 63}, {27, 46}, {50, 11}, {57, 39}, {36, 5}, {9, 39}, {11, 93}, {96, 65}, {33, 87}, {6, 14}, {37, 7}, {83, 93}, {1, 26}, {16, 7}, {37, 53}, {24, 65}, {10, 46}, {88, 47}, {80, 89}, {19, 36}, {85, 62}, {64, 53}, {17, 45}, {32, 68}, {61, 47}, {81, 2}, {58, 29}, {67, 53}, {65, 99}, {46, 14}, {52, 7}, {56, 27}, {56, 58}, {75, 53}, {53, 6}, {4, 53}, {25, 31}, {33, 53}, {92, 77}, {66, 37}, {9, 21}, {57, 42}, {50, 27}, {88, 13}, {32, 94}, {88, 50}, {24, 60}, {82, 20}, {3, 94}, {87, 39}, {80, 67}, {82, 36}, {90, 61}, {14, 15}, {62, 54}, {48, 3}, {89, 13}, {99, 78}, {57, 6}, {72, 5}, {55, 79}, {4, 63}, {10, 18}, {52, 14}, {65, 10}, {22, 71}, {2, 19}, {5, 62}, {8, 41}, {24, 19}, {89, 63}, {16, 32}, {1, 97}, {88, 98}, {98, 87}, {98, 13}, {90, 7}, {11, 60}, {83, 45}, {66, 34}, {69, 71}, {66, 29}, {14, 95}, {12, 95}, {70, 87}, {96, 83}, {3, 93}, {97, 94}, {12, 53}, {83, 3}, {90, 22}, {32, 27}, {11, 95}, {99, 36}, {35, 92}, {99, 54}, {96, 11}, {76, 78}, {74, 94}, {43, 55}, {88, 35}, {82, 55}, {4, 60}, {48, 80}, {75, 84}, {20, 14}, {72, 23}, {92, 71}, {32, 84}, {89, 94}, {30, 79}, {16, 91}, {25, 21}, {45, 61}, {86, 39}, {25, 15}, {4, 23}, {48, 24}, {17, 26}, {96, 73}, {40, 34}, {64, 31}, {3, 67}, {72, 77}, {65, 4}, {29, 78}, {24, 55}, {49, 5}, {33, 37}, {50, 5}, {80, 66}, {91, 68}, {92, 39}, {16, 52}, {76, 39}, {81, 82}, {91, 87}, {32, 28}, {48, 35}, {16, 22}, {83, 44}, {62, 70}, {51, 95}, {72, 50}, {10, 7}, {19, 79}, {85, 31}, {97, 6}, {53, 86}, {76, 7}, {89, 71}, {35, 94}, {38, 55}, {74, 29}, {20, 5}, {27, 92}, {57, 98}, {19, 77}, {85, 39}, {99, 21}, {57, 59}, {4, 93}, {88, 49}, {74, 60}, {51, 20}, {65, 81}, {60, 92}, {5, 85}, {99, 55}, {73, 23}, {90, 83}, {65, 3}, {90, 70}, {2, 39}, {59, 31}, {76, 69}, {57, 22}, {65, 73}, {72, 33}, {67, 52}, {8, 60}, {19, 47}, {8, 12}, {58, 44}, {51, 29}, {68, 53}, {9, 92}, {36, 30}, {97, 85}, {85, 63}, {65, 74}, {32, 13}, {91, 12}, {88, 23}, {64, 90}, {84, 94}, {16, 99}, {61, 77}, {57, 54}, {14, 39}, {9, 37}, {65, 18}, {49, 43}, {96, 71}, {35, 39}, {8, 31}, {64, 74}, {28, 61}, {3, 70}, {28, 54}, {37, 22}, {69, 31}, {52, 92}, {42, 21}, {58, 85}, {64, 15}, {70, 23}, {97, 31}, {25, 69}, {96, 17}, {91, 63}, {36, 45}, {28, 20}, {44, 47}, {81, 21}, {80, 29}, {48, 8}, {19, 52}, {82, 68}, {76, 94}, {27, 70}, {56, 44}, {8, 51}, {17, 21}, {97, 93}, {33, 18}, {81, 84}, {41, 50}, {49, 86}, {64, 45}, {42, 71}, {34, 53}, {1, 94}, {64, 66}, {72, 93}, {25, 87}, {66, 83}, {33, 77}, {51, 5}, {91, 6}, {33, 20}, {26, 84}, {51, 76}, {19, 68}, {98, 71}, {51, 36}, {60, 6}, {14, 7}, {10, 28}, {69, 7}, {54, 55}, {77, 21}, {82, 3}, {46, 15}, {13, 21}, {11, 76}, {14, 47}, {57, 76}, {60, 28}, {32, 9}, {50, 92}, {19, 12}, {67, 55}, {34, 38}, {60, 15}, {62, 15}, {73, 14}, {34, 7}, {29, 61}, {2, 18}, {58, 55}, {57, 34}, {57, 26}, {96, 27}, {18, 45}, {16, 47}, {59, 22}, {92, 86}, {94, 79}, {89, 92}, {99, 87}, {33, 75}, {70, 39}, {43, 20}, {98, 83}, {16, 78}, {72, 3}, {24, 75}, {97, 23}, {41, 5}, {10, 2}, {44, 39}, {66, 22}, {89, 18}, {72, 54}, {52, 78}, {26, 71}, {66, 12}, {89, 61}, {72, 15}, {41, 10}, {24, 69}, {33, 86}, {4, 61}, {59, 6}, {3, 77}, {32, 1}, {2, 4}, {83, 69}, {9, 67}, {88, 36}, {66, 43}, {8, 72}, {16, 45}, {65, 78}, {38, 31}, {98, 31}, {45, 71}, {43, 76}, {66, 82}, {24, 37}, {11, 94}, {3, 63}, {48, 23}, {49, 87}, {62, 63}, {88, 58}, {19, 35}, {49, 75}, {41, 67}, {25, 70}, {17, 50}, {17, 47}, {34, 58}, {1, 83}, {58, 12}, {94, 31}, {91, 23}, {59, 27}, {10, 5}, {64, 82}, {88, 62}, {69, 86}, {10, 35}, {3, 95}, {9, 61}, {64, 5}, {85, 55}, {80, 43}, {96, 39}, {22, 63}, {83, 28}, {32, 65}, {28, 4}, {49, 76}, {9, 44}, {86, 79}, {41, 94}, {75, 68}, {65, 31}, {35, 76}, {82, 11}, {98, 62}, {49, 4}, {24, 45}, {21, 69}, {10, 74}, {13, 86}, {25, 52}, {65, 87}, {25, 74}, {28, 94}, {17, 58}, {1, 27}, {4, 77}, {18, 62}, {75, 39}, {64, 26}, {49, 83}, {67, 68}, {83, 7}, {45, 47}]
        # change_set = [{2, 46}, {56, 90}, {24, 7}, {48, 77}, {20, 47}, {34, 78}, {8, 1}, {62, 95}, {21, 63}, {27, 46}, {50, 11}, {57, 39}, {36, 5}, {9, 39}, {11, 93}]
        move_set = []
        result_set = []
        self.set.append(change_set)
        self.set.append(move_set)
        self.set.append(result_set)
        for i in range(0,size):
            self.set[2].append(0)
            alist = list(self.set[0][i])
            a = alist[0]
            b = alist[1]
            self.set[1].append(self.move_change(mov,a,b)) 
            
        
        '''
        i = 0
        for i in range(0,size):
            
            a,b = self.random_generate()
            new_set = {a,b}
            count = 0
            while new_set in self.set[0]:
                count +=1
                a,b = self.random_generate()
                new_set = {a,b}
                if count>20:
                    break
            # print("size")
            # print(i)
            self.set[0].append(new_set)
            self.set[1].append(self.move_change(mov,a,b))  
            self.set[2].append(0)  
            
        '''
        
            
    def __del__(self):
        return
        
    def clean(self):
        self.set = []
            
    def iter(self,i):
        
        alist = list(self.set[0][i])
        a = alist[0]
        b = alist[1]
        self.set[1][i] = self.move_change(self.set[1][i],a,b)
        
        
        
    def random_generate(self):
        a = np.random.randint(1,100,1)
        b = np.random.randint(1,100,1)
        while(b==a):
            b = np.random.randint(1,101,1)
        return int(a),int(b)
    
    
    def move_change(self,mov,a,b):
        c= mov[a-1]
        mov[a-1] = mov[b-1]
        mov[b-1] = c
        return mov
        
# move = [49, 65, 63, 41, 13, 96, 6, 11, 59, 27, 14, 100, 44, 42, 54, 98, 73, 84, 75, 36, 34, 99, 58, 30, 82, 21, 80, 53, 31, 71, 57, 56, 38, 43, 94, 50, 78, 19, 66, 28, 61, 22, 2, 46, 45, 32, 85, 83, 72, 23, 95, 90, 81, 68, 67, 1, 70, 48, 87, 93, 40, 91, 29, 24, 17, 8, 3, 18, 15, 74, 69, 64, 9, 26, 77, 51, 10, 79, 60, 88, 47, 5, 89, 20, 25, 35, 7, 76, 12, 97, 52, 55, 33, 39, 86, 16, 37, 4, 62, 92]
# test = Subset(move,1)
# print(test.set[1])